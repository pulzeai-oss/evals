{"question": "Assist me in converting the subsequent Python code into Kotlin, with utmost attention to preserving its functionality and structure.\n\nfun calculateFactorial(n: Int): Int {\n    return if (n == 0) 1 else n * calculateFactorial(n - 1)", "subject": "code_to_code_translation", "answer": "fun calculateFactorial(n: Int): Int {\n    return if (n == 0) 1 else n * calculateFactorial(n - 1)\n}"}
{"question": "Please convert this excel formula to tsql: \"=IF(COUNTA(AE2:AO2)=COUNTIF(AE2:AO2,\"-1\"),\"NO TESTS\",((100/11)+100)/(COUNTA(AE2:AO2,)-COUNTIF(A2:AE2,\"-1\"))\\*COUNTIF(AE2:AO2,\"1\"))\"", "subject": "code_to_code_translation", "answer": "```sql\nIF COUNT(AE2:AO2) = COUNTIF(AE2:AO2, '-1'), 'NO TESTS', ((100/11) + 100) / (COUNT(AE2:AO2) - COUNTIF(AE2:AO2, '-1')) * COUNTIF(AE2:AO2, '1')\n```"}
{"question": "can you convert this c++ code to python: `#include<bits/stdc++.h>\n \nusing namespace std;\n \nconst int N = 500+1;\n \nint n, m, r, t, k;\n \nvector<int> g[N];\nint mt[N], d[N];\n \nint T;\nint used[N];\nbool try_dfs(int v, int deg){\n    if(used[v] == T)\n        return false;\n    used[v] = T;\n    if(d[v] > deg+1)\n        return true;\n    for(int u : g[v])\n        if(try_dfs(mt[u], deg)){\n            --d[mt[u]];\n            mt[u] = v;\n            ++d[v];\n            return true;\n        }\n    return false;\n}\n \nint main(){\n    ios_base::sync_with_stdio(false);\n    cout.tie(0);\n    cin.tie(0);\n    cin >> n >> m >> r >> t >> k;\n    for(int i = 0; i < k; ++i){\n        int u, v;\n        cin >> u >> v;\n        --u; --v;\n        g[u].push_back(v);\n    }\n    for(int u = 0; u < m; ++u)\n        mt[u] = -1;\n    for(int v = 0; v < n; ++v)\n        for(int u : g[v]) if(mt[u] == -1){\n            mt[u] = v;\n            ++d[v];\n        }\n    bool updated = true;\n    while(updated){\n        updated = false;\n        vector<pair<int, int>> ds;\n        for(int v = 0; v < n; ++v)\n            ds.emplace_back(d[v], v);\n        sort(ds.begin(), ds.end());\n        ++T;\n        for(int i = 0; i < n; ++i){\n            int v = ds[i].second;\n            if(try_dfs(v, d[v])){\n                updated = true;\n                break;\n            }\n        }\n    }\n    int penalty = 0;\n    vector<tuple<int, int, int>> res;\n    for(int v = 0; v < n; ++v)\n        d[v] = min(d[v], t/r);\n    for(int u = 0; u < m; ++u)\n        if(mt[u] != -1 && d[mt[u]]){\n            penalty += d[mt[u]]*r;\n            --d[mt[u]];\n            res.emplace_back(mt[u]+1, u+1, d[mt[u]]*r);\n        }\n    cout << res.size() << \" \" << penalty << \"\\n\";\n    for(auto el : res)\n        cout << get<0>(el) << \" \" << get<1>(el) << \" \" << get<2>(el) << \"\\n\";\n}`", "subject": "code_to_code_translation", "answer": "Sure! Here's the equivalent Python code:\n```python\nimport sys\nimport heapq"}
{"question": "I require your expertise in transforming this Python code into Swift. Ensure that the function signature includes the 'throws' keyword and handle potential errors properly.\n\ndef divide_numbers(dividend, divisor):\n    if divisor == 0:\n        raise ValueError(\"Cannot divide by zero\")\n    return dividend / divisor", "subject": "code_to_code_translation", "answer": "func divideNumbers(dividend: Double, divisor: Double) throws -> Double {\n    guard divisor != 0 else {\n        throw NSError(domain: \"DivisionError\", code: 1, userInfo: [NSLocalizedDescriptionKey: \"Cannot divide by zero\"])\n    }\n    return dividend / divisor\n}"}
{"question": "下面这段C#代码改成php怎么写？请详细写一下，不要跳过任何代码块或者结构。using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.IO.Compression;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace wechatSaver\n{\n public class ZipHelper\n {\n \n /// \n /// 将传入字符串以GZip算法压缩后，返回Base64编码字符\n /// \n /// 需要压缩的字符串\n /// 压缩后的Base64编码的字符串\n public static string GZipCompressString(string rawString)\n {\n if (string.IsNullOrEmpty(rawString) || rawString.Length == 0)\n {\n return \"\";\n }\n else\n {\n byte[] rawData = System.Text.Encoding.UTF8.GetBytes(rawString.ToString());\n byte[] zippedData = Compress(rawData);\n return (string)(Convert.ToBase64String(zippedData));\n }\n\n }\n public static byte[] CompressStr2byte(string rawString)\n {\n if (string.IsNullOrEmpty(rawString) || rawString.Length == 0)\n {\n return null;\n }\n else\n {\n byte[] rawData = System.Text.Encoding.UTF8.GetBytes(rawString.ToString());\n byte[] zippedData = Compress(rawData);\n return zippedData;\n }\n }\n /// \n /// GZip压缩\n /// \n /// \n /// \n public static byte[] Compress(byte[] rawData)\n {\n MemoryStream ms = new MemoryStream();\n GZipStream compressedzipStream = new GZipStream(ms, CompressionMode.Compress, true);\n compressedzipStream.Write(rawData, 0, rawData.Length);\n compressedzipStream.Close();\n return ms.ToArray();\n }\n /// \n /// 将传入的二进制字符串资料以GZip算法解压缩\n /// \n /// 经GZip压缩后的二进制字符串\n /// 原始未压缩字符串\n public static string GZipDecompressString(string zippedString)\n {\n if (string.IsNullOrEmpty(zippedString) || zippedString.Length == 0)\n {\n return \"\";\n }\n else\n {\n byte[] zippedData = Convert.FromBase64String(zippedString.ToString());\n return (string)(System.Text.Encoding.UTF8.GetString(Decompress(zippedData)));\n }\n }\n /// \n /// ZIP解压\n /// \n /// \n /// \n public static byte[] Decompress(byte[] zippedData)\n {\n MemoryStream ms = new MemoryStream(zippedData);\n GZipStream compressedzipStream = new GZipStream(ms, CompressionMode.Decompress);\n MemoryStream outBuffer = new MemoryStream();\n byte[] block = new byte[1024];\n while (true)\n {\n int bytesRead = compressedzipStream.Read(block, 0, block.Length);\n if (bytesRead <= 0)\n break;\n else\n outBuffer.Write(block, 0, bytesRead);\n }\n compressedzipStream.Close();\n return outBuffer.ToArray();\n }\n public static string Decompressbyte2string(byte[] zippedData)\n {\n MemoryStream ms = new MemoryStream(zippedData);\n GZipStream compressedzipStream = new GZipStream(ms, CompressionMode.Decompress);\n MemoryStream outBuffer = new MemoryStream();\n byte[] block = new byte[1024];\n while (true)\n {\n int bytesRead = compressedzipStream.Read(block, 0, block.Length);\n if (bytesRead <= 0)\n break;\n else\n outBuffer.Write(block, 0, bytesRead);\n }\n compressedzipStream.Close();\n return System.Text.Encoding.UTF8.GetString(outBuffer.ToArray());\n }\n }\n}", "subject": "code_to_code_translation", "answer": "Here is the equivalent PHP code for your C# code. Please note that PHP doesn't have namespaces, classes, and methods structure like C#. Also, PHP uses different libraries for compression and encoding.\n\n```php\n<?php\nclass ZipHelper {\n\n    public static function GZipCompressString($rawString) {\n        if (empty($rawString)) {\n            return \"\";\n        } else {\n            $rawData = mb_convert_encoding($rawString, 'UTF-8');\n            $zippedData = self::Compress($rawData);\n            return base64_encode($zippedData);\n        }\n    }\n\n    public static function CompressStr2byte($rawString) {\n        if (empty($rawString)) {\n            return null;\n        } else {\n            $rawData = mb_convert_encoding($rawString, 'UTF-8');\n            $zippedData = self::Compress($rawData);\n            return $zippedData;\n        }\n    }\n\n    public static function Compress($rawData) {\n        return gzcompress($rawData);\n    }\n\n    public static function GZipDecompressString($zippedString) {\n        if (empty($zippedString)) {\n            return \"\";\n        } else {\n            $zippedData = base64_decode($zippedString);\n            return mb_convert_encoding(self::Decompress($zippedData), 'UTF-8');\n        }\n    }\n\n    public static function Decompress($zippedData) {\n        return gzuncompress($zippedData);\n    }\n\n    public static function Decompressbyte2string($zippedData) {\n        return mb_convert_encoding(self::Decompress($zippedData), 'UTF-8');\n    }\n}\n?>\n```\n\nIn this PHP code, I've used `mb_convert_encoding` for string encoding and `gzcompress` and `gzuncompress` for compression and decompression respectively. The `base64_encode` and `base64_decode` functions are used for Base64 encoding and decoding."}
{"question": "I need you to translate the following Python code into Java. Please maintain the same method structure and use camelCase for function names.\n\ndef calculate_area_of_circle(radius):\n    return 3.14159 * radius * radius", "subject": "code_to_code_translation", "answer": "public double calculateAreaOfCircle(double radius) {\n    return 3.14159 * radius * radius;\n}"}
{"question": "Hey there! Can you help me out? I want this cool Python code to be converted into C++. Just keep the variable names as they are, okay?\n\nint multiply_numbers(int a, int b) {\n    return a * b;\n}", "subject": "code_to_code_translation", "answer": "Sure! Here's the Python code converted into C++ while keeping the variable names the same:\n\n```cpp\nint multiply_numbers(int a, int b) {\n    return a * b;\n}\n```"}
{"question": "Take this Python code and rewrite it in Go language.\n\nfunc addNumbers(a, b int) int {\n    return a + b\n}", "subject": "code_to_code_translation", "answer": "```go\nfunc addNumbers(a int, b int) int {\n    return a + b\n}```"}
{"question": "consider the following node.js app\n\n// Import the necessary modules\nconst Jimp = require('jimp');\nconst { createCanvas } = require('canvas');\n\n// Load the images and store them in an array\nconst images = [Jimp.read('image1.png'), Jimp.read('image2.png'), ...];\n\n// Function to fade between the images\nasync function fadeBetweenImages(images, values) {\n // Create a new blank image\n const result = new Jimp(images[0].bitmap.width, images[0].bitmap.height);\n\n // Loop through the images and values and fade between them\n for (let i = 0; i < images.length; i++) {\n // Get the current image and value\n const image = images[i];\n const value = values[i];\n\n // Fade the current image into the result image\n result.composite(image, 0, 0, {\n mode: Jimp.BLEND\\_SOURCE\\_OVER,\n opacitySource: value,\n opacityDest: 1.0 - value\n });\n }\n\n // Create a new canvas and draw the result image on it\n const canvas = createCanvas(result.bitmap.width, result.bitmap.height);\n const ctx = canvas.getContext('2d');\n ctx.drawImage(result, 0, 0);\n\n // Show the canvas on screen\n document.body.appendChild(canvas);\n\n // Return the result image\n return result;\n}\n\n// Subscribe to the brainwaves observable\nconst subscription = notion.brainwaves(\"powerByBand\").subscribe((brainwaves) => {\n // Variables for the values of the images\n var var1 = brainwaves.data.alpha[4];\n var var2 = brainwaves.data.theta[2];\n var var3 = brainwaves.data.alpha[5];\n var var4 = brainwaves.data.theta[7];\n\n // Array of values for the images\n const values = [var1, var2, var3, var4];\n\n // Fade between the images using the given values\n const result = fadeBetweenImages(images, values);\n\n // Listen for the S key press\n document.addEventListener('keydown', (event) => {\n if (event.key === 's') {\n // Unsubscribe from the brainwaves observable\n subscription.unsubscribe();\n\n // Save the result image\n result.write('result.png');\n }\n });\n});\n\ncan you turn it into a React.js app?", "subject": "code_to_code_translation", "answer": "Sure, I can guide you on how to convert this Node.js app into a React.js app. However, please note that React is a front-end library and doesn't have direct access to the file system like Node.js. So, you'll need to use an API or some other method to fetch the images. Also, the `createCanvas` function seems to be from the `node-canvas` library, which is not directly compatible with React. You might want to use the HTML5 Canvas API instead.\n\nHere's a basic structure of how you might set up your React app:\n\n```jsx\nimport React, { useEffect, useState } from 'react';\nimport Jimp from 'jimp';\nimport { createCanvas } from 'canvas'; // you might need to replace this with the HTML5 Canvas API\n\nfunction App() {\n  const [images, setImages] = useState([]);\n  const [result, setResult] = useState(null);\n\n  useEffect(() => {\n    // Fetch images from an API or some other method\n    const fetchImages = async () => {\n      const image1 = await Jimp.read('image1.png');\n      const image2 = await Jimp.read('image2.png');\n      // ...\n      setImages([image1, image2, ...]);\n    };\n\n    fetchImages();\n  }, []);\n\n  useEffect(() => {\n    if (images.length > 0) {\n      fadeBetweenImages(images, values).then(setResult);\n    }\n  }, [images]);\n\n  async function fadeBetweenImages(images, values) {\n    // Your fadeBetweenImages function here\n    // Replace createCanvas with the HTML5 Canvas API\n    // Return the result image or canvas\n  }\n\n  return (\n    <div>\n      {result && (\n        <canvas ref={canvasRef => {\n          if (canvasRef) {\n            const ctx = canvasRef.getContext('2d');\n            ctx.drawImage(result, 0, 0);\n          }\n        }} />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n```\n\nThis is a very basic setup and doesn't include the brainwave subscription or the keydown event listener. You'll need to adapt those parts of your code to work within the React lifecycle. For example, you might use the `useEffect` hook to subscribe to the brainwave observable when the component mounts, and unsubscribe when it unmounts. The keydown event listener could be added to the `window` object within a `useEffect` hook.\n\nPlease note that this is a simplified example and might not work as-is. You'll need to adapt it to your specific use case and handle any errors or edge cases that might arise."}
{"question": "Can you translate this code plotting a graph in R to instead plot a graph in an html script using plotly:\n\nllm\\_data <-tibble(\n Model = c(\"GPT3\", \"LaMDa\", \"PaLM\", \"Chinchilla\", \"mt-nlg\", \"Gopher\"),\n Params = c(175L, 137L, 540L, 70L, 530L, 280L),\n Training\\_Data = c(300L, 168L, 780L, 1400L, 270L, 300L)\n)\n\nllm\\_data %>% \n ggplot(aes(x=Training\\_Data,y=Params, label=Model))+\n geom\\_label()+\n labs(\n x= \"Training Data (billion tokens)\",\n y= \"Parameters (billions)\"\n )+\n theme\\_bw()", "subject": "code_to_code_translation", "answer": "```html\n<!DOCTYPE html>\n<html>\n<head>\n  <script src=\"https://cdn.plot.ly/plotly-latest.min.js\"></script>\n</head>\n<body>\n  <div id=\"plot\"></div>\n\n  <script>\n    var data = [{\n      x: [300, 168, 780, 1400, 270, 300],\n      y: [175, 137, 540, 70, 530, 280],\n      mode: 'markers',\n      type: 'scatter',\n      text: ['GPT3', 'LaMDa', 'PaLM', 'Chinchilla', 'mt-nlg', 'Gopher'],\n      marker: {size: 12}\n    }];\n\n    var layout = {\n      xaxis: {\n        title: {\n          text: 'Training Data (billion tokens)'\n        }\n      },\n      yaxis: {\n        title: {\n          text: 'Parameters (billions)'\n        }\n      }\n    };\n\n    Plotly.newPlot('plot', data, layout);\n  </script>\n</body>\n</html>\n```\nThis code is now an HTML script that uses Plotly to plot a graph with the same data from the R code."}
{"question": "transform from javascript to Rust:\n```\n// write isEven by using if 20 times\nfunction isEven(n) {\n if (n == 0) {\n return true;\n } else if (n == 1) {\n return false;\n } else if (n == 2) {\n return true;\n } else if (n == 3) {\n return false;\n } else if (n == 4) {\n return true;\n } else if (n == 5) {\n return false;\n } else if (n == 6) {\n return true;\n } else if (n == 7) {\n return false;\n } else if (n == 8) {\n return true;\n } else if (n == 9) {\n return false;\n } else if (n == 10) {\n return true;\n } else {\n throw new Error(\"not implemented\");\n }\n}\n```", "subject": "code_to_code_translation", "answer": "```rust\nfn is_even(n: i32) -> bool {\n    match n {\n        0 | 2 | 4 | 6 | 8 | 10 => true,\n        1 | 3 | 5 | 7 | 9 => false,\n        _ => panic!(\"not implemented\"),\n    }\n}\n```"}
{"question": "I have a springboot project written in kotlin. I am in the process of converting my rest APIs to grpc protocol. For that the first step is to create the .proto files. I'll need your help with converting my kotlin data class object classes to proto objects. Can you do that? This is my first object:\ndata class CommentExchange(\n @field:JsonProperty(\"commmentId\") var commentId: Int = 0,\n @field:JsonProperty(\"contentId\") var contentId: Int = 0,\n @field:JsonProperty(\"highlightPageId\") var highlightPageId : String? = null,\n\n @field:JsonProperty(\"commentText\") var commentText: String? = null,\n\n @field:JsonProperty(\"contentType\")\n var contentType: ContentType = ContentType.DEFAULT,\n\n @get:JsonSerialize(using = ZonedDateTimeSerializer::class)\n @get:JsonDeserialize(using = ZoneDateTimeDeserializer::class)\n @get:JsonFormat(pattern = Constants.SERVER\\_V2\\_FORMAT\\_DATETIME, shape = JsonFormat.Shape.STRING)\n @field:JsonProperty(\"postDateTime\") var postDateTime: ZonedDateTime? = null,\n\n @field:JsonProperty(\"author\") var author: CommentAuthorDoc? = null,\n @field:JsonProperty(\"commentType\")\n var commentType: CommentType = CommentType.NORMAL,\n @field:JsonProperty(\"mention\")\n var mention: List? = null,\n\n @field:JsonProperty(\"parentId\")\n var parentId: Int = -1,\n\n @field:JsonProperty(\"stickerUrl\")\n var stickerUrl : String? = null,\n\n @field:JsonProperty(\"numReplies\")\n var numReplies: Int = 0,\n\n @field:JsonProperty(\"numLikes\")\n var numLikes: Int = 0,\n\n @field:JsonProperty(\"isPinned\")\n var isPinned : Boolean = false\n)", "subject": "code_to_code_translation", "answer": "Here is the equivalent proto definition for your CommentExchange data class:\n\n```protobuf\nsyntax = \"proto3\";\n\nimport \"google/protobuf/timestamp.proto\";\n\nenum ContentType {\n  DEFAULT = 0;\n  // Add more content types as needed\n}\n\nenum CommentType {\n  NORMAL = 0;\n  // Add more comment types as needed\n}\n\nmessage CommentAuthorDoc {\n  // Define the fields for CommentAuthorDoc if needed\n}\n\nmessage CommentExchange {\n  int32 commentId = 1;\n  int32 contentId = 2;\n  string highlightPageId = 3;\n  string commentText = 4;\n  ContentType contentType = 5;\n  google.protobuf.Timestamp postDateTime = 6;\n  CommentAuthorDoc author = 7;\n  CommentType commentType = 8;\n  repeated string mention = 9;\n  int32 parentId = 10;\n  string stickerUrl = 11;\n  int32 numReplies = 12;\n  int32 numLikes = 13;\n  bool isPinned = 14;\n}\n```\n\nYou can use this proto definition to generate the necessary classes in Kotlin for your gRPC implementation. Let me know if you need any further assistance with this."}
{"question": "It would be a pleasure if you could kindly convert this Python code to TypeScript. However, I'd like you to use arrow functions for the conversion, if possible.\n\nconst getDouble = (num) => {\n    return num * 2;\n}", "subject": "code_to_code_translation", "answer": "const getDouble = (num: number): number => num * 2;"}
{"question": "import csv\nimport re\nimport sys\nimport argparse\nimport json\ndef parse\\_csv(input\\_file, output\\_file, parse\\_rules):\n # Extract data from the input file according to the parse rules and write it to the output file\n try:\n # Open the input file and create a CSV reader object\n with open(input\\_file, 'r') as f:\n reader = csv.reader(f)\n \n # Open the output file and create a CSV writer object\n with open(output\\_file, 'w') as f:\n writer = csv.writer(f)\n\n # Iterate through the rows in the input file\n for row in reader:\n try:\n # Extract the desired data according to the parse rules\n extracted\\_data = []\n for rule in parse\\_rules:\n # Apply each parse rule to the row and append the result to the extracted\\_data list\n extracted\\_data.append(apply\\_parse\\_rule(row, rule))\n except Exception as e:\n print(f'Error applying parse rules: {e}')\n continue\n\n # Write the extracted data to the output file\n writer.writerow(extracted\\_data)\n except Exception as e:\n print(f'Error reading input file or writing to output file: {e}')\n sys.exit(1)\n\ndef apply\\_parse\\_rule(row, rule):\n # Extract the desired data from the specified column\n column\\_data = row[rule['column\\_index']]\n \n # Use the regular expression specified in the parse rule to extract the desired data\n extracted\\_data = re.search(rule['regex'], column\\_data).group()\n\n return extracted\\_data\n\ndef parse\\_csv(input\\_file, output\\_file, parse\\_rules):\n # Extract data from the input file according to the parse rules and write it to the output file\n try:\n # Open the input file and create a CSV reader object\n with open(input\\_file, 'r') as f:\n reader = csv.reader(f)\n \n # Open the output file and create a CSV writer object\n with open(output\\_file, 'w') as f:\n writer = csv.writer(f)\n\n # Iterate through the rows in the input file\n for row in reader:\n try:\n # Extract the desired data according to the parse rules\n extracted\\_data = []\n for rule in parse\\_rules:\n # Apply each parse rule to the row and append the result to the extracted\\_data list\n extracted\\_data.append(apply\\_parse\\_rule(row, rule))\n except Exception as e:\n print(f'Error applying parse rules: {e}')\n continue\n\n # Write the extracted data to the output file\n writer.writerow(extracted\\_data)\n except Exception as e:\n print(f'Error reading input file or writing to output file: {e}')\n sys.exit(1)\n\nif \\_\\_name\\_\\_ == '\\_\\_main\\_\\_':\n def parse\\_csv(input\\_file, output\\_file, parse\\_rules):\n # Code for parsing the CSV file goes here\n\n parse\\_rules\\_list = [\n [{'column\\_index': 0, 'regex': r'\\d+'}, {'column\\_index': 1, 'regex': r'[A-Za-z]+'}],\n [{'column\\_index': 0, 'regex': r'\\d{4}-\\d{2}-\\d{2}'}, {'column\\_index': 1, 'regex': r'\\d+'}],\n \n ]\n\n # Use the argparse module to define and parse the command-line arguments\nparser = argparse.ArgumentParser()\nparser.add\\_argument('--parse\\_rules', '-r', required=True, help='The parse rules to use to extract data from the input file. Should be a JSON string representing a list of dictionaries.')\nparser.add\\_argument('--input', required=True, help='The path to the input CSV file')\nparser.add\\_argument('--output', required=True, help='The path to the output CSV file')\nargs = parser.parse\\_args()\n \nparse\\_rules\\_list = [\n {'column\\_index': 0, 'regex': r'\\d+'},\n {'column\\_index': 1, 'regex': r'[A-Za-z]+'},\n ]\n\n # Call the parse\\_csv function to extract data from the input file and write it to the output file\nparse\\_csv(args.input, args.output, parse\\_rules\\_list)\nparser = argparse.ArgumentParser(description='Extract data from a CSV file using the specified parse rules.')\n\n # Add the input file argument\nparser.add\\_argument('--input', '-i', required=True, help='The path to the input CSV file.')\n\n# Add the output file argument\nparser.add\\_argument('--output', '-o', required=True, help='The path to the output CSV file.')\n\nparser = argparse.ArgumentParser()\nparser.add\\_argument('--input', dest='input\\_file', help='The input file')\nparser.add\\_argument('--output', dest='output\\_file', help='The output file')\n\n # Parse the command-line arguments\nargs = parser.parse\\_args()\n\n# Convert the parse rules argument from a JSON string to a list of dictionaries\nparse\\_rules = json.loads(args.parse\\_rules)\n\n# Call the parse\\_csv function to extract data from the input file and write it to the output file\nparse\\_csv(args.input, args.output, parse\\_rules)\n\njson\\_string = '{\"key\": \"value\"}'\n\n# Parse the JSON string and convert it to a Python dictionary\ndata = json.loads(json\\_string)\n\n# Access the value of the \"key\" key\nvalue = data['key']\n\nprint(value) # Output: \"value\"\n\n# Create an argument parser\nparser = argparse.ArgumentParser()\nparser.add\\_argument('--input', required=True, help='The path to the input CSV file')\nparser.add\\_argument('--output', required=True, help='The path to the output CSV file')\nparser.add\\_argument('--parse\\_rules', required=True, help='The parse rules in JSON format')\nargs = parser.parse\\_args()\n\n# Add arguments to the parser\nparser.add\\_argument('--input', help='path to the input file')\nparser.add\\_argument('--output', help='path to the output file')\n\n# Parse the arguments\nargs = parser.parse\\_args()\n\n# Access the arguments\ninput\\_file = args.input\noutput\\_file = args.output\n\ncan you rewrite this in swift and add anything to it that it may need or my be missing", "subject": "code_to_code_translation", "answer": "Sure! Here is a rewritten version of the script in Swift:\n\n```swift\nimport Foundation\n\nfunc parseCSV(inputFile: String, outputFile: String, parseRules: [[String: Any]]) {\n    do {\n        let contents = try String(contentsOfFile: inputFile)\n        let rows = contents.components(separatedBy: \"\\n\")\n        \n        var outputString = \"\"\n        \n        for row in rows {\n            var extractedData = [String]()\n            \n            for rule in parseRules {\n                if let columnIndex = rule[\"column_index\"] as? Int, let regex = rule[\"regex\"] as? String {\n                    let columnData = row.components(separatedBy: \",\")[columnIndex]\n                    if let extracted = applyParseRule(columnData: columnData, regex: regex) {\n                        extractedData.append(extracted)\n                    }\n                }\n            }\n            \n            let rowString = extractedData.joined(separator: \",\")\n            outputString.append(rowString + \"\\n\")\n        }\n        \n        try outputString.write(toFile: outputFile, atomically: true, encoding: .utf8)\n    } catch {\n        print(\"Error reading input file or writing to output file: \\(error)\")\n        exit(1)\n    }\n}\n\nfunc applyParseRule(columnData: String, regex: String) -> String? {\n    do {\n        let regex = try NSRegularExpression(pattern: regex)\n        let range = NSRange(location: 0, length: columnData.utf16.count)\n        if let match = regex.firstMatch(in: columnData, options: [], range: range) {\n            return String(columnData[Range(match.range, in: columnData)!])\n        }\n    } catch {\n        print(\"Error applying parse rule: \\(error)\")\n    }\n    \n    return nil\n}\n\nlet parseRulesList: [[String: Any]] = [\n    [\"column_index\": 0, \"regex\": \"\\\\d+\"],\n    [\"column_index\": 1, \"regex\": \"[A-Za-z]+\"]\n]\n\nlet inputFile = \"input.csv\"\nlet outputFile = \"output.csv\"\n\nparseCSV(inputFile: inputFile, outputFile: outputFile, parseRules: parseRulesList)\n```\n\nIn this rewritten version, I have used Swift's `Foundation` framework to handle file operations and regular expressions. The `parseCSV` function reads the input CSV file, extracts data based on the parse rules, and writes the extracted data to the output CSV file. The `applyParseRule` function uses `NSRegularExpression` to apply the regex pattern to the column data and extract the desired data.\n\nYou can run this Swift script in Xcode or any other Swift development environment to parse CSV files using the specified parse rules. Let me know if you need any further assistance or modifications!"}
{"question": "Can you convert this jsdoc to proptypes?\n/\\*\\*\n \\* Bonus list item.\n \\*\n \\* @param {object} props\n \\* @param {SwagupData} props.bonus\n \\* @param {Function} props.setModalShown\n \\* @param {Function} props.setModalBonus\n \\* @param {Function} props.activateBonus\n \\*/\nBonusBannerItem.propTypes =", "subject": "code_to_code_translation", "answer": "{\n  props: PropTypes.shape({\n    bonus: PropTypes.instanceOf(SwagupData).isRequired,\n    setModalShown: PropTypes.func.isRequired,\n    setModalBonus: PropTypes.func.isRequired,\n    activateBonus: PropTypes.func.isRequired\n  }).isRequired\n}"}
{"question": "Convert this to tailwind\n\nconst Callout = ({ emoji, children }) => (\n \n {emoji}\n\n {children}\n{`\n p {\n margin: 20px 0;\n line-height: 1.5;\n display: flex;\n background: #eee;\n padding: 15px 10px;\n font-size: 16px;\n align-items: center;\n }\n\n .children {\n display: block;\n }\n\n .emoji {\n font-size: 18px;\n display: block;\n width: 35px;\n text-align: center;\n }\n `}\n\n);\n\nexport default Callout;", "subject": "code_to_code_translation", "answer": "```css\np {\n  margin: 20px 0;\n  line-height: 1.5;\n  display: flex;\n  background-color: #eee;\n  padding: 15px 10px;\n  font-size: 16px;\n  align-items: center;\n}\n\n.children {\n  display: block;\n}\n\n.emoji {\n  font-size: 18px;\n  display: block;\n  width: 35px;\n  text-align: center;\n}\n```"}
{"question": "I have a Matlab code I want to translate to python. This Matlab code writes values in an excel spreadsheet, so you will need a python to excel import. Here is the code:\nfunction [Es,poissonacero,pesohormigon]=Modulo6MATERIALES(fck,fyd,nomenhormigon,nomenacero)\n\n% Nota: La información de los materiales (MatProp03 se generan a partir de las anteriores)\n% Por lo tanto, no es necesario definirlas\n\n%%\n\n% Hormigon \npoissonhormigon=0.2;\ndensidadhormigon=2300;\npesohormigon=densidadhormigon\\*9.8/1000;\ntermicohormigon=1\\*10^-5;\n\nfcd=fck/1.5;\nfctk=0.3\\*(fck)^2/3;\nEc=8500\\*(fck+8)^(1/3);\nGc=Ec/(2\\*(1+poissonhormigon));\n\n% Acero\npoissonacero=0.3;\ndensidadacero=7850;\npesoacero=densidadacero\\*9.8/1000;\ntermicoacero=1.2\\*10^-5;\n\nfu=490;\nEs=210000;\nGs=81000;\n\n%%\nMaterial = {nomenhormigon;nomenacero};\nType = {'Concrete';'Steel'};\nGrade = {'';''};\nSynType = {'Isotropic';'Isotropic'};\nTempDepend = {'No';'No'};\nColor = {'White';'Yellow'};\n\nUnitWeight=[pesohormigon;pesoacero];\nUnitMass=[densidadhormigon;densidadacero]; % Ojo que en excel esta kN/m4\nE1=[Ec;Es];\nG12=[Gc;Gs];\nU12=[poissonhormigon;poissonacero];\nA1=[termicohormigon;termicoacero];\n\n%% ESCRIBIMOS EN HOJA DE EXCEL (HOJA 5:MAT PROP 01)\n\nMatProp01=table2cell(table(Material,Type,Grade,SynType,TempDepend,Color));\nwritecell(MatProp01,'.\\ExcelBASE-M1.xlsx','Sheet',6,'Range','A4');\nwritecell(MatProp01,'.\\ExcelBASE-M2.xlsx','Sheet',6,'Range','A4');\n\n%% ESCRIBIMOS EN HOJA DE EXCEL (HOJA 6:MAT PROP 02)\n\nMatProp02=table2cell(table(Material,UnitWeight,UnitMass/1000,1000\\*E1,1000\\*G12,U12,A1));\nwritecell(MatProp02,'.\\ExcelBASE-M1.xlsx','Sheet',7,'Range','A4');\nwritecell(MatProp02,'.\\ExcelBASE-M2.xlsx','Sheet',7,'Range','A4');", "subject": "code_to_code_translation", "answer": "Here is the equivalent Python code for the given Matlab code:\n\n```python\nimport pandas as pd\n\ndef Modulo6MATERIALES(fck, fyd, nomenhormigon, nomenacero):\n    # Hormigon\n    poissonhormigon = 0.2\n    densidadhormigon = 2300\n    pesohormigon = densidadhormigon * 9.8 / 1000\n    termicohormigon = 1 * 10**-5\n\n    fcd = fck / 1.5\n    fctk = 0.3 * (fck)**2 / 3\n    Ec = 8500 * (fck + 8)**(1/3)\n    Gc = Ec / (2 * (1 + poissonhormigon))\n\n    # Acero\n    poissonacero = 0.3\n    densidadacero = 7850\n    pesoacero = densidadacero * 9.8 / 1000\n    termicoacero = 1.2 * 10**-5\n\n    fu = 490\n    Es = 210000\n    Gs = 81000\n\n    Material = [nomenhormigon, nomenacero]\n    Type = ['Concrete', 'Steel']\n    Grade = ['', '']\n    SynType = ['Isotropic', 'Isotropic']\n    TempDepend = ['No', 'No']\n    Color = ['White', 'Yellow']\n\n    UnitWeight = [pesohormigon, pesoacero]\n    UnitMass = [densidadhormigon, densidadacero]\n    E1 = [Ec, Es]\n    G12 = [Gc, Gs]\n    U12 = [poissonhormigon, poissonacero]\n    A1 = [termicohormigon, termicoacero]\n\n    # ESCRIBIMOS EN HOJA DE EXCEL (HOJA 5:MAT PROP 01)\n    MatProp01 = pd.DataFrame({\n        'Material': Material,\n        'Type': Type,\n        'Grade': Grade,\n        'SynType': SynType,\n        'TempDepend': TempDepend,\n        'Color': Color\n    })\n    MatProp01.to_excel('ExcelBASE-M1.xlsx', sheet_name='Sheet6', startrow=3, startcol=0)\n\n    # ESCRIBIMOS EN HOJA DE EXCEL (HOJA 6:MAT PROP 02)\n    MatProp02 = pd.DataFrame({\n        'Material': Material,\n        'UnitWeight': UnitWeight,\n        'UnitMass': [x / 1000 for x in UnitMass],\n        'E1': [x * 1000 for x in E1],\n        'G12': [x * 1000 for x in G12],\n        'U12': U12,\n        'A1': A1\n    })\n    MatProp02.to_excel('ExcelBASE-M1.xlsx', sheet_name='Sheet7', startrow=3, startcol=0)\n\n# Example usage\nModulo6MATERIALES(30, 400, 'Hormigon', 'Acero')\n```\n\nMake sure you have the `pandas` library installed for writing to Excel files. You can install it using `pip install pandas`. This Python code should perform the equivalent operations and write the values to the specified Excel file."}
{"question": "Convert this Python code to JavaScript.\n\ndef calculate_square(num):\n    return num * num", "subject": "code_to_code_translation", "answer": "function calculate_square(num) {\n    return num * num;\n}"}
{"question": "Can convert below jquery live query to plain js?\n\n$(\"body\").on('click', '.xxx', function(e) {\n\n});", "subject": "code_to_code_translation", "answer": "document.querySelector(\"body\").addEventListener(\"click\", function(e) {\n    if (e.target.classList.contains(\"xxx\")) {\n        // code here\n    }\n});"}
{"question": "Here is some C code. Can you turn it into Perl and make sure it is properly commented?\n\n#include \n\n#include \n#include \n#include \n#include \n#include \n#include \n#include \n\nvoid alarmh(int);\nvoid usage(void);\n\nint\nmain(int argc, char \\*argv[])\n{\n struct timespec rqtp;\n time\\_t t;\n char \\*cp;\n int ch, i;\n\n if (pledge(\"stdio\", NULL) == -1)\n err(1, \"pledge\");\n\n signal(SIGALRM, alarmh);\n\n while ((ch = getopt(argc, argv, \"\")) != -1) {\n switch(ch) {\n default:\n usage();\n }\n }\n argc -= optind;\n argv += optind;\n\n if (argc != 1)\n usage();\n\n timespecclear(&rqtp);\n\n /\\* Handle whole seconds. \\*/\n for (cp = argv[0]; \\*cp != '\\0' && \\*cp != '.'; cp++) {\n if (!isdigit((unsigned char)\\*cp))\n errx(1, \"seconds is invalid: %s\", argv[0]);\n t = (rqtp.tv\\_sec \\* 10) + (\\*cp - '0');\n if (t / 10 != rqtp.tv\\_sec) /\\* overflow \\*/\n errx(1, \"seconds is too large: %s\", argv[0]);\n rqtp.tv\\_sec = t;\n }\n\n /\\*\n \\* Handle fractions of a second. The multiplier divides to zero\n \\* after nine digits so anything more precise than a nanosecond is\n \\* validated but not used.\n \\*/\n if (\\*cp == '.') {\n i = 100000000;\n for (cp++; \\*cp != '\\0'; cp++) {\n if (!isdigit((unsigned char)\\*cp))\n errx(1, \"seconds is invalid: %s\", argv[0]);\n rqtp.tv\\_nsec += (\\*cp - '0') \\* i;\n i /= 10;\n }\n }\n\n if (timespecisset(&rqtp)) {\n if (nanosleep(&rqtp, NULL) == -1)\n err(1, \"nanosleep\");\n }\n\n return 0;\n}\n\nvoid\nusage(void)\n{\n fprintf(stderr, \"usage: %s seconds\\n\", getprogname());\n exit(1);\n}\n\n/\\*\n \\* POSIX.1 says sleep(1) may exit with status zero upon receipt\n \\* of SIGALRM.\n \\*/\nvoid\nalarmh(int signo)\n{\n /\\*\n \\* Always \\_exit(2) from signal handlers: exit(3) is not\n \\* generally signal-safe.\n \\*/\n \\_exit(0);\n}", "subject": "code_to_code_translation", "answer": "#!/usr/bin/perl\n\nuse strict;\nuse warnings;\nuse Time::HiRes qw(nanosleep);\nuse Getopt::Std;\n\nsub alarmh {\n    my $signo = shift;\n    exit 0;\n}\n\nsub usage {\n    die \"usage: $0 seconds\\n\";\n}\n\n$SIG{ALRM} = \\&alarmh;\n\nmy $seconds = shift @ARGV;\nif (!$seconds) {\n    usage();\n}\n\nmy $sleep_seconds = int($seconds);\nmy $sleep_nanoseconds = int(($seconds - $sleep_seconds) * 1e9);\n\nif ($sleep_seconds < 0 || $sleep_seconds > 1_000_000_000 || $sleep_nanoseconds < 0 || $sleep_nanoseconds > 999_999_999) {\n    die \"Invalid number of seconds: $seconds\\n\";\n}\n\nnanosleep($sleep_seconds, $sleep_nanoseconds);\n\nexit 0;"}
{"question": "translate following delphi code to C# : Function tResponseLUTManager.GetResponseLUT(Seed: pResponseSeed): pResponseLUT;\nvar i: integer;\n\t\tseedcs, li: longint;\n\t\tsi: single absolute li;\nBegin\n\twith Seed^ do begin\n\t\tseedcs := ord(CurveType) + nPoints;\n\t\tfor i := 0 to nPoints-1 do begin\n\t\t\tsi := ResponsePoints^[i].Value;\n\t\t\tseedcs := seedcs + (ResponsePoints^[i].Posn + li) * (i+1);\n\t\tend;\n\tend;\n\n\ti := 0;\n\twhile (i < Count) and (pResponseRec(Items[i])^.SeedCheckSum <> seedcs) do inc(i);\n\tif i = Count then CreateResponseLUT(Seed, seedcs);\n\tResult := @pResponseRec(Items[i])^.LUT;\nEnd;", "subject": "code_to_code_translation", "answer": "Here's the C# translation of the given Delphi code:\n```csharp\nunsafe public pResponseLUT GetResponseLUT(pResponseSeed seed)\n{\n    int i;\n    ulong seedcs = 0, li ="}
{"question": "convert this to Golang: from decimal import Decimal\nfrom pprint import pprint\nimport boto3\ndef update\\_coordinates(game\\_components, name, last\\_location, dynamodb=None):\n if not dynamodb:\n dynamodb = boto3.resource('dynamodb', region\\_name='eu-west-2')\n\n table = dynamodb.Table('Game')\n\n response = table.update\\_item(\n Key={\n 'game\\_components': game\\_components,\n 'name': name\n },\n UpdateExpression=\"set last\\_location=:l\",\n ExpressionAttributeValues={ #r, p, s are placeholder values\n ':l': last\\_location\n },\n )\n return response", "subject": "code_to_code_translation", "answer": "import (\n    \"github.com/aws/aws-sdk-go/aws\"\n    \"github.com/aws/aws-sdk-go/aws/session\"\n    \"github.com/aws/aws-sdk-go/service/dynamodb\"\n)\n\nfunc updateCoordinates(gameComponents string, name string, lastLocation string, dynamodb *dynamodb.DynamoDB) (*dynamodb.UpdateItemOutput, error) {\n    if dynamodb == nil {\n        sess := session.Must(session.NewSession(&aws.Config{\n            Region: aws.String(\"eu-west-2\"),\n        }))\n        dynamodb = dynamodb.New(sess)\n    }\n\n    input := &dynamodb.UpdateItemInput{\n        TableName: aws.String(\"Game\"),\n        Key: map[string]*dynamodb.AttributeValue{\n            \"game_components\": {\n                S: aws.String(gameComponents),\n            },\n            \"name\": {\n                S: aws.String(name),\n            },\n        },\n        UpdateExpression: aws.String(\"set last_location=:l\"),\n        ExpressionAttributeValues: map[string]*dynamodb.AttributeValue{\n            \":l\": {\n                S: aws.String(lastLocation),\n            },\n        },\n    }\n\n    result, err := dynamodb.UpdateItem(input)\n    if err != nil {\n        return nil, err\n    }\n\n    return result, nil\n}"}
{"question": "Translate this script from BASH to Ansible:\n\n#create core user/group ID\nusername=core\necho -e \"\\n\\n\\n\\n\\n\\n\\n\\n\"|adduser $username\necho -e \"core\"'!'\"\\ncore\"'!'|passwd core\necho \"core ALL=(ALL) NOPASSWD: ALL\" > /etc/sudoers.d/core\nusermod -aG adm $username;usermod -aG sudo $username;usermod -aG docker $username;usermod -aG video $username;usermod -aG render $username\n\ntimedatectl set-timezone 'America/Los\\_Angeles'\necho LANG=en\\_US.UTF-8> /etc/default/locale;cat /etc/default/locale\nhostnamectl set-hostname $(echo `hostname` | tr \"a-z\" \"A-Z\");cat /etc/hostname\n\nrm /etc/resolv.conf;touch /etc/resolv.conf;chmod 777 /etc/resolv.conf\nsleep 5\n\n{\necho 'options rotate'\necho 'options timeout:5'\necho 'options attempts:3'\necho ''\necho 'nameserver 10.50.50.50'\necho 'nameserver 10.50.10.50'\necho 'search redmond.corp.microsoft.com corp.microsoft.com'\n} > /etc/resolv.conf\n\n#!/bin/bash\nLAST\\_OCTET=`ip addr show enp134s0f1| grep -v inet6| awk '/inet/ {print $2}' | cut -d/ -f1|cut -d . -f 4`\necho $LAST\\_OCTET\n\nrm /etc/netplan/00\\* /etc/netplan/50\\*\n{\necho 'network:'\necho ' version: 2'\necho ' renderer: networkd'\necho ' ethernets:'\necho ' enp134s0f1:'\necho ' addresses:'\necho ' - 10.184.185'.$LAST\\_OCTET'/24'\necho ' optional: true'\necho ' gateway4: 10.184.185.1'\necho ' nameservers:'\necho ' search: [redmond.corp.microsoft.com, corp.microsoft.com, guest.corp.microsoft.com]'\necho ' addresses: [10.50.10.50, 10.50.50.50]'\n} > /etc/netplan/01-netcfg.yaml\n\nnetplan apply", "subject": "code_to_code_translation", "answer": "---\n\n- hosts: all\n\ntasks:\n\n- name: Create core user/group ID\nuser:\nname: core\npassword: \"\\$6\\$rounds=656000\\$yF.2OVKc\\$.Q4XZi/Q4XZi/Q4XZi/Q4XZi/Q4XZi/Q4XZi/Q4XZi/Q4XZi/Q4XZi/"}
{"question": "transform the following c# code to typescript \n\npublic void CalculateAllIn(ProductDescription pd, IList cashflow)\n {\n if (cashflow != null && !cashflow.Any()) { pd.AllIn = null; return; }\n\n var allInFeesTypes = new[] { CashflowType.PlatformFee, CashflowType.IntermediaryFee };\n var fees = cashflow.Where(cf => allInFeesTypes.Contains(cf.Type)).Sum(cf => cf.Total);\n\n // no platform or broker fees, no all in - nominal will be used\n if (fees == 0d) { pd.AllIn = null; return; }\n\n // fixed loans (non reference) -> adds all coupons\n // variable or reference based -> adds spread and liquidity costs\n var coupon = pd.InterestBaseRate == InterestBaseRate.None\n ? cashflow.Where(cf => cf.Type == CashflowType.Coupon).Sum(cf => cf.Total)\n : 0d;\n\n // unlimited, considers maturity of 1 year\n // otherwise, gets the years by summing all the interest years of the cashflow\n var years = pd.Maturity.IsUnlimited ? 1d : cashflow.Sum(cf => cf.InterestPeriodYears);\n var costs = pd.Spread ?? 0d + pd.LiquidityCosts ?? 0d;\n\n // we always store the all in as a percentage, conversion to bps in the\n // case of reference rate and variables happens in the FE\n pd.AllIn = costs + (fees + coupon) / (pd.Volume \\* years) \\* 100;\n }", "subject": "code_to_code_translation", "answer": "public CalculateAllIn(pd: ProductDescription, cashflow: IList): void {\n  if (cashflow != null && cashflow.length === 0) { \n    pd.AllIn = null; \n    return; \n  }\n\n  const allInFeesTypes = [CashflowType.PlatformFee, CashflowType.IntermediaryFee];\n  const fees = cashflow.filter(cf => allInFeesTypes.includes(cf.Type)).reduce((acc, cf) => acc + cf.Total, 0);\n\n  if (fees === 0) { \n    pd.AllIn = null; \n    return; \n  }\n\n  const coupon = pd.InterestBaseRate === InterestBaseRate.None\n    ? cashflow.filter(cf => cf.Type === CashflowType.Coupon).reduce((acc, cf) => acc + cf.Total, 0)\n    : 0;\n\n  const years = pd.Maturity.IsUnlimited ? 1 : cashflow.reduce((acc, cf) => acc + cf.InterestPeriodYears, 0);\n  const costs = (pd.Spread ?? 0) + (pd.LiquidityCosts ?? 0);\n\n  pd.AllIn = costs + ((fees + coupon) / (pd.Volume * years)) * 100;\n}"}
{"question": "convert this roblox movement script to MTA SA LUA\nlocal ContextActionService = game:GetService(\"ContextActionService\")\nlocal RunService = game:GetService(\"RunService\")\n\nlocal player = game:GetService(\"Players\").LocalPlayer\nlocal camera = workspace.CurrentCamera\n\nlocal character\nlocal humanoidRootPart\nlocal humanoid\nlocal groundCheck\n\nplayer.CharacterAdded:Connect(function(newCharacter)\n\n\tcharacter = newCharacter\n\n\thumanoidRootPart = character:WaitForChild(\"HumanoidRootPart\")\n\thumanoid = character:WaitForChild(\"Humanoid\")\n\n\tgroundCheck = script.GroundCheck:Clone()\n\tgroundCheck.Weld.Part0 = humanoidRootPart\n\tgroundCheck.Parent = character\n\nend)\n\n\nlocal Cmd = {\n\n\tupMove = false;\n\tdownMove = false;\n\n\tleftMove = false;\n\trightMove = false;\n\n\tlastUp = false;\n\tlastLeft = false;\n\n\tjump = false;\n\tjustPressed = false;\n\n\tcrouch = false;\n\tcjustPressed = false;\n\n}\n\nlocal function onUp(actionName, inputState)\n\n\tif inputState == Enum.UserInputState.Begin then\n\n\t\tCmd.upMove = true\n\t\tCmd.lastUp = true\n\n\telseif inputState == Enum.UserInputState.End then\n\n\t\tCmd.upMove = false\n\n\tend\n\nend\n\nlocal function onLeft(actionName, inputState)\n\n\tif inputState == Enum.UserInputState.Begin then\n\n\t\tCmd.leftMove = true\n\t\tCmd.lastLeft = true\n\n\telseif inputState == Enum.UserInputState.End then\n\n\t\tCmd.leftMove = false\n\n\tend\n\nend\n\nlocal function onDown(actionName, inputState)\n\n\tif inputState == Enum.UserInputState.Begin then\n\n\t\tCmd.downMove = true\n\t\tCmd.lastUp = false\n\n\telseif inputState == Enum.UserInputState.End then\n\n\t\tCmd.downMove = false\n\n\tend\n\nend\n\nlocal function onRight(actionName, inputState)\n\n\tif inputState == Enum.UserInputState.Begin then\n\n\t\tCmd.rightMove = true\n\t\tCmd.lastLeft = false\n\n\telseif inputState == Enum.UserInputState.End then\n\n\t\tCmd.rightMove = false\n\n\tend\n\nend\n\nlocal function onJump(actionName, inputState)\n\n\tif inputState == Enum.UserInputState.Begin then\n\n\t\tCmd.jump = true\n\t\tCmd.justPressed = true\n\n\telseif inputState == Enum.UserInputState.End then\n\n\t\tCmd.jump = false\n\n\tend\n\nend\n\nlocal function onCrouch(actionName, inputState)\n\n\tif inputState == Enum.UserInputState.Begin then\n\n\t\tCmd.crouch = true\n\t\tCmd.cjustPressed = true\n\n\telseif inputState == Enum.UserInputState.End then\n\n\t\tCmd.crouch = false\n\n\tend\n\nend\n\nContextActionService:BindAction(\"Up\", onUp, false, \"w\")\nContextActionService:BindAction(\"Left\", onLeft, false, \"a\")\nContextActionService:BindAction(\"Down\", onDown, false, \"s\")\nContextActionService:BindAction(\"Right\", onRight, false, \"d\")\nContextActionService:BindAction(\"Jump\", onJump, false, Enum.KeyCode.Space)\nContextActionServ", "subject": "code_to_code_translation", "answer": "ice:BindAction(\"Crouch\", onCrouch, false, Enum.KeyCode.LeftControl)\n\nlocal function update()\n\n\tif character and humanoidRootPart and humanoid then\n\n\t\tlocal moveDirection = Vector3.new(0, 0, 0)\n\n\t\tif Cmd.upMove then\n\t\t\tmoveDirection = moveDirection + camera.CFrame.lookVector\n\t\tend\n\n\t\tif Cmd.downMove then\n\t\t\tmoveDirection = moveDirection - camera.CFrame.lookVector\n\t\tend\n\n\t\tif Cmd.leftMove then\n\t\t\tmoveDirection = moveDirection - camera.CFrame.rightVector\n\t\tend\n\n\t\tif Cmd.rightMove then\n\t\t\tmoveDirection = moveDirection + camera.CFrame.rightVector\n\t\tend\n\n\t\tmoveDirection = moveDirection.unit\n\n\t\tif Cmd.jump then\n\t\t\thumanoid.Jump = true\n\t\tend\n\n\t\tif Cmd.crouch then\n\t\t\thumanoid.Sit = true\n\t\tend\n\n\t\thumanoid:Move(moveDirection * 16)\n\n\tend\n\nend\n\nRunService.RenderStepped:Connect(function()\n\tupdate()\nend)"}
{"question": "Please translate the following code to Croatian and add comments in the same language:\n---\n#include <Arduino.h>\n\n#define RELEJ_1 LED_BUILTIN\n#define RELEJ_2 D3\n\n#include <ESP8266WiFi.h>\n#include <ESP8266WebServer.h>\n#include <ESP8266mDNS.h>\n\nESP8266WebServer server(80);\n\nString getPage();\n\nvoid preklopi_relej(int relej)\n{\n    digitalWrite(relej, HIGH);\n    delay(500);\n    digitalWrite(relej, LOW);\n}\n\nvoid setup()\n{\n    Serial.begin(9600);\n\n    pinMode(RELEJ_1, OUTPUT);\n    pinMode(RELEJ_2, OUTPUT);\n\n    WiFi.begin(\"A1_586972105\", \"Suvidol012\");\n\n    while (WiFi.status() != WL_CONNECTED)\n    {\n        delay(1000);\n        Serial.println(\"Connecting to WiFi...\");\n    }\n\n    if (!MDNS.begin(\"mdv\"))\n    {\n        Serial.println(\"Error setting up MDNS responder!\");\n        while (1)\n        {\n            delay(1000);\n        }\n    }\n\n    Serial.println(\"mDNS responder started\");\n    MDNS.addService(\"http\", \"tcp\", 80);\n\n    server.on(\"/\", HTTP_GET, []()\n              { server.send(200, \"text/html\", getPage()); });\n\n    server.on(\"/toggle1\", HTTP_GET, []()\n              {\n        preklopi_relej(RELEJ_1);\n        server.send(200, \"text/html\", getPage()); });\n\n    server.on(\"/toggle2\", HTTP_GET, []()\n              {\n        preklopi_relej(RELEJ_2);\n        server.send(200, \"text/html\", getPage()); });\n\n    server.begin();\n}\n\nvoid loop()\n{\n    server.handleClient();\n    MDNS.update();\n}\n\nString getPage()\n{\n    String page = \"<html lang=\\\"hr\\\">\\\n    <head>\\\n      <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1\\\">\\\n    </head>\\\n    <style>\\\n        button {\\\n        width: 150px;\\\n        height: 150px;\\\n        font-size: 40px;\\\n        }\\\n    </style>\\\n    <body style='display: flex;'>\\\n      <div style='display: flex; justify-content: center; align-items: center; flex-direction: column; width: 100%;'>\\\n        <h1 style='text-align: center;'>Dvorisna Vrata</h1>\\\n        <br>\\\n        <div style='display: flex;'>\\\n            <a href=\\\"/toggle1\\\"><button>Pritisni 1</button></a>\\\n            <a href=\\\"/toggle2\\\"><button>Pritisni 2</button></a>\\\n        </div>\\\n      </div>\\\n    </body>\\\n  </html>\";\n    return page;\n}\n--", "subject": "code_to_code_translation", "answer": "// Ova skica koda koristi Arduino framework i ESP8266WiFi biblioteku\n// da implementira web server na ESP82"}
{"question": "can you convert this cli command to golang aws sdk \n\naws cognito-idp list-users-in-group --user-pool-id us-east-2\\_4YtYz6hV0 --group-name account:6412003a7a61c0beecdd16a7 --query \"Users[?Attributes[?Name=='custom:profileType' && Value=='1'] || Attributes[?Name=='custom:profileType' && Value=='2']].Attributes[\\*].Value\"", "subject": "code_to_code_translation", "answer": "Sure! Here's an example of how you could convert that CLI command to Go using the AWS SDK for Go:\n```go\npackage main\n\nimport (\n    \"github.com/aws/aws-sdk-go/aws\"\n    \"github.com/aws/aws-sdk-go/aws/session\"\n    \"github.com/aws/aws-sdk-go/service/cognitoidentityprovider\"\n    \"fmt\"\n)\n\nfunc main() {\n    sess, err := session.NewSession(&aws.Config{\n        Region: aws.String(\"us-east-2\"),\n    })\n\n    if err != nil {\n        fmt.Println(\"Failed to connect to AWS\", err)\n        return\n    }\n\n    svc := cognitoidentityprovider.New(sess)\n\n    input := &cognitoidentityprovider.ListUsersInGroupInput{\n        UserPoolId: aws.String(\"us-east-2_4YtYz6hV0\"),\n        GroupName:  aws.String(\"account:6412003a7a61c0beecdd16a7\"),\n    }"}
{"question": "convert this java function into golang:\n\n```\npublic static String doAES(String param, String aesKey, String method) {\n\n \n\n byte[] key = new byte[0];\n byte[] paramByte = new byte[0];\n String finalParam = \"\";\n\n \n\n try {\n\n \n\n key = (aesKey).getBytes(\"UTF-8\");\n SecretKeySpec secretKeySpec = new SecretKeySpec(key, \"AES\");\n Cipher cipher = Cipher.getInstance(\"AES\");\n\n \n\n if (method.equals(\"encrypt\")) {\n cipher.init(Cipher.ENCRYPT\\_MODE, secretKeySpec);\n paramByte = cipher.doFinal(param.getBytes());\n finalParam = Base64.getEncoder().encodeToString(paramByte);\n } else {\n cipher.init(Cipher.DECRYPT\\_MODE, secretKeySpec);\n paramByte = cipher.doFinal(Base64.getDecoder().decode(param));\n finalParam = new String(paramByte);\n }\n\n \n\n } catch(GeneralSecurityException ex) {\n System.out.println(\"Could not retrieve AES cipher.\");\n } catch (UnsupportedEncodingException ex) {\n System.out.println(\"Cannot use UTF-8 encoding.\");\n }\n\n \n\n return finalParam;\n }\n```", "subject": "code_to_code_translation", "answer": "import (\n\t\"crypto/aes\"\n\t\"crypto/cipher\"\n\t\"encoding/base64\"\n\t\"fmt\"\n\t\"unicode/utf8\"\n)\n\nfunc doAES(param, aesKey, method string) string {\n\tkey := []byte{}\n\tparamByte := []byte{}\n\tfinalParam := \"\"\n\n\tkey = []byte(aesKey)\n\tsecretKeySpec := aes.NewCipher(key)\n\n\tif method == \"encrypt\" {\n\t\tcipher, _ := cipher.NewGCM(secretKeySpec)\n\t\tparamByte = cipher.Seal(nil, nil, []byte(param), nil)\n\t\tfinalParam = base64.StdEncoding.EncodeToString(paramByte)\n\t} else {\n\t\tcipher, _ := cipher.NewGCM(secretKeySpec)\n\t\tdecodedParam, _ := base64.StdEncoding.DecodeString(param)\n\t\tparamByte, _ = cipher.Open(nil, nil, decodedParam, nil)\n\t\tfinalParam = string(paramByte)\n\t}\n\n\treturn finalParam\n}"}
{"question": "convert this python function that take a line of text as argument to rust language:\n\ndef get\\_line(line):\n line = line.replace(\",\",\".\",1)\n a = re.split(\"(java:\\\\d+]) \", line,3)\n if len(a)!=3:\n warnings.warn(\"Se esperaban 3 elementos en esta línea pero se han obenido \" + str(len(a)))\n warnings.warn(line)\n return([])\n\n general, general\\_ln, log = re.split(\"(java:\\\\d+]) \", line,3)\n general = general + general\\_ln\n date, time, level, thread, class\\_name, line\\_number = general.split(\" \",6)\n thread = re.sub(\"^\\\\[.\\*-\\\\d+-\",\"\", thread,1)\n thread = re.sub(\"^.\\*#\", \"\", thread,1).replace(\"]\",\"\",1)\n if len(thread)>0:\n thread = \"#\" + thread\n\n log = log.rstrip()\n # casos de los guiones: IDSOLEQ DBIMSG\n if \"solicitudes-\" in log:\n log = log.replace(\"solicitudes-\", \"solicitudes -\")\n elif \"-Insertado\" in log:\n log = log.replace(\"-Insertado\", \"- Insertado\")\n #parts = re.split(\" +- +| +-|- +\", log)[1:]\n \n parts = re.split(\" - \", log)\n #parts = re.split(\" +- +\", log)\n assert len(parts) > 2, \"Muy pocos tags en: \" + line\n pet\\_type = parts.pop(0).replace(\"- \",\"\")\n tag = parts.pop(0)\n if \" \" in tag:\n print(tag)\n raise Exception(f\"Espacio en el tag {tag}\\n{log}\\n#####{line}\\npet\\_type:{pet\\_type}\\ntag:{tag}\\nparts:{parts}\")\n sys.exit()\n tag = tag.replace(\"[\",\"\",1).replace(\"]\",\"\",1)\n assert len(tag) > 0, \"Tag no encontrada en línea: \" + line\n\n # casos especiales\n if tag == \"DBIMSG\":\n if parts[0] == \"Insertado el mensaje de peticion externa\":\n tag = \"DBIMSG\\_PE\"\n elif parts[0] == \"Insertado el mensaje de respuesta externa\":\n tag = \"DBIMSG\\_RE\"\n elif parts[0] == \"Insertado el mensaje de peticion intermediacion\":\n tag = \"DBIMSG\\_PI\"\n elif parts[0] == \"Insertado el mensaje de respuesta intermediacion\":\n tag = \"DBIMSG\\_RI\"\n else:\n assert False, \"No se esperaba mensaje: \" + parts[0] + \" en línea\\n\" + line +\"\\n\"\n if tag in [\"EXTEPOL\"]: # caso en el que se usa - como vacío\n if (parts[1]==parts[2]) and (parts[1]==''):\n parts.pop(1)\n if tag in [\"DBIEXT\",\"DBIINT\",\"DBUEXT\",\"DBUINT\"]:\n cod\\_estado, cod\\_error = parts[-2].split(\"](\",1)\n parts = parts[:-2] + [cod\\_estado[1:], cod\\_error[:-1], parts[-1]]\n if tag == \"SCHSAUTHFILL\":\n if parts[0] == \"Tiempo de busqueda de peticiones pendientes de rellenar su autorizacion\":\n tag = \"SCHSAUTHFILL\\_B\"\n elif parts[0].startswith(\"Tiempo en encolar\"):\n tag = \"SCHSAUTHFILL\\_EN\"\n else:\n print(f\"No debería ocurrir: {parts[0]}\")\n texto = parts.pop(0)\n if tag == \"PETEXTAF\": # otro caso especial. Este tag no lleva texto\n parts.insert(0,texto)\n parts[-1] = parts[-1].replace(\"?\",\"\")\n parts = [tag, pet\\_type, date + \" \" + time, thread] + parts\n return(parts)", "subject": "code_to_code_translation", "answer": "Here's a Rust version of your Python function. Please note that Rust is a statically typed language, so you'll need to define the type of each variable. Also, Rust doesn't have a built-in regex library, so I'm using the `regex` crate, which you can add to your `Cargo.toml` file as a dependency.\n\n```rust\nuse regex::Regex;\nuse std::error::Error;\nuse std::fmt;\n\n#[derive(Debug)]\nstruct MyError {\n    message: String,\n}\n\nimpl fmt::Display for MyError {\n    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n        write!(f, \"{}\", self.message)\n    }\n}\n\nimpl Error for MyError {}\n\nfn get_line(line: &str) -> Result<Vec<String>, Box<dyn Error>> {\n    let line = line.replace(\",\", \".\", 1);\n    let re = Regex::new(\"(java:\\\\d+]) \")?;\n    let a = re.split(line.as_str()).collect::<Vec<&str>>();\n    if a.len() != 3 {\n        warn!(\"Se esperaban 3 elementos en esta línea pero se han obtenido {}\", a.len());\n        warn!(\"{}\", line);\n        return Err(Box::new(MyError {\n            message: \"Unexpected number of elements\".to_string(),\n        }));\n    }\n\n    let (general, general_ln, log) = (a[0], a[1], a[2]);\n    let general = format!(\"{}{}\", general, general_ln);\n    let mut parts: Vec<&str> = log.split(\" - \").collect();\n    assert!(parts.len() > 2, \"Muy pocos tags en: {}\", line);\n    let pet_type = parts.remove(0).replace(\"- \", \"\");\n    let tag = parts.remove(0);\n    if tag.contains(\" \") {\n        println!(\"{}\", tag);\n        return Err(Box::new(MyError {\n            message: \"Espacio en el tag\".to_string(),\n        }));\n    }\n    let tag = tag.replace(\"[\", \"\").replace(\"]\", \"\");\n    assert!(!tag.is_empty(), \"Tag no encontrada en línea: {}\", line);\n\n    // casos especiales\n    if tag == \"DBIMSG\" {\n        match parts[0] {\n            \"Insertado el mensaje de peticion externa\" => {\n                tag = \"DBIMSG_PE\".to_string()\n            }\n            \"Insertado el mensaje de respuesta externa\" => {\n                tag = \"DBIMSG_RE\".to_string()\n            }\n            \"Insertado el mensaje de peticion intermediacion\" => {\n                tag = \"DBIMSG_PI\".to_string()\n            }\n            \"Insertado el mensaje de respuesta intermediacion\" => {\n                tag = \"DBIMSG_RI\".to_string()\n            }\n            _ => {\n                return Err(Box::new(MyError {\n                    message: \"No se esperaba mensaje\".to_string(),\n                }))\n            }\n        }\n    }\n\n    // ... continue with the rest of your function\n\n    Ok(vec![]) // replace with your return value\n}\n```"}
{"question": "Can you convert this MATLAB script into a function:\n%% Build table of search image info\nsearch Image InfoStruct=dir (imageFolder + \"\\\\*.jpg\");\nsearch Image Info=struct2table (search ImageInfoStruct);\nsearch ImageInfo=convertvars (search Image Info,@iscell, 'string');\nsearch ImageInfo.Properties. VariableNames {'name' }='filename';\nname=extractBefore(search ImageInfo.filename, '.');\nsearch Image Info=addvars (search ImageInfo, name, 'Before',1);\n\nimageDS=imageDatastore (fullfile (search ImageInfo.folder, search ImageInfo.filename));\nimageRGB=readall(imageDS);\n\nimage=cellfun (@(x) x(:,:,channelToCorrelate), imageRGB, UniformOutput=false);\nsearch Image Info=addvars (search ImageInfo, image, imageRGB, 'After',1);\nsearch ImageM-cellfun (@(x) size (x,1), search ImageInfo.image);\nsearch ImageN=cellfun (@(x) size (x, 2), search ImageInfo.image);\nsearch ImageInfo=addvars (search ImageInfo, search ImageM, search ImageN, 'After', 2);", "subject": "code_to_code_translation", "answer": "function searchImageInfo = buildSearchImageInfo(imageFolder, channelToCorrelate)\n    searchImageInfoStruct = dir(imageFolder + \"\\\\*.jpg\");\n    searchImageInfo = struct2table(searchImageInfoStruct);\n    searchImageInfo = convertvars(searchImageInfo, @iscell, 'string');\n    searchImageInfo.Properties.VariableNames{'name'} = 'filename';\n    name = extractBefore(searchImageInfo.filename, '.');\n    searchImageInfo = addvars(searchImageInfo, name, 'Before', 1);\n\n    imageDS = imageDatastore(fullfile(searchImageInfo.folder, searchImageInfo.filename));\n    imageRGB = readall(imageDS);\n\n    image = cellfun(@(x) x(:,:,channelToCorrelate), imageRGB, 'UniformOutput', false);\n    searchImageInfo = addvars(searchImageInfo, image, imageRGB, 'After', 1);\n    searchImageM = cellfun(@(x) size(x, 1), searchImageInfo.image);\n    searchImageN = cellfun(@(x) size(x, 2), searchImageInfo.image);\n    searchImageInfo = addvars(searchImageInfo, searchImageM, searchImageN, 'After', 2);\nend"}
{"question": "Rewrite this YAML config to C++ code in an Espressif IDF function that reads registers. \ntext\\_sensor:\n # Range 30000 - 30035\n - name: \"Huawei inverter model\"\n icon: \"mdi:information\"\n platform: modbus\\_controller\n modbus\\_controller\\_id: huawei\\_inverter\n register\\_type: holding\n address: 30000\n register\\_count: 15\n response\\_size: 30\n skip\\_updates: 100\n - name: \"Huawei inverter SN\"\n icon: \"mdi:information\"\n platform: modbus\\_controller\n modbus\\_controller\\_id: huawei\\_inverter\n register\\_type: holding\n address: 30015\n register\\_count: 10\n response\\_size: 20\n skip\\_updates: 100\n - name: \"Huawei inverter PN\"\n icon: \"mdi:information\"\n platform: modbus\\_controller\n modbus\\_controller\\_id: huawei\\_inverter\n register\\_type: holding\n address: 30025\n register\\_count: 10\n response\\_size: 20\n skip\\_updates: 100\n\n # Inverter status string\n - name: \"Huawei inverter status\"\n platform: template\n id: inverter\\_status\\_string\n icon: \"mdi:information\"\nbinary\\_sensor:\n # Range 32000 - 32019 (1/2)\n # Register 32000\n - name: \"Huawei inverter state standby\"\n icon: \"mdi:information\"\n platform: modbus\\_controller\n modbus\\_controller\\_id: huawei\\_inverter\n register\\_type: holding\n address: 32000\n bitmask: 0x001\n - name: \"Huawei inverter state grid-connected\"\n icon: \"mdi:information\"\n platform: modbus\\_controller\n modbus\\_controller\\_id: huawei\\_inverter\n register\\_type: holding\n address: 32000\n bitmask: 0x002\n - name: \"Huawei inverter state grid-connected normally\"\n icon: \"mdi:information\"\n platform: modbus\\_controller\n modbus\\_controller\\_id: huawei\\_inverter\n register\\_type: holding\n address: 32000\n bitmask: 0x004\n - name: \"Huawei inverter state grid connection with derating due to power rationing\"\n icon: \"mdi:information\"\n platform: modbus\\_controller\n modbus\\_controller\\_id: huawei\\_inverter\n register\\_type: holding\n address: 32000\n bitmask: 0x008\n - name: \"Huawei inverter state grid connection with derating due to internal causes of the solar inverter\"\n icon: \"mdi:information\"\n platform: modbus\\_controller\n modbus\\_controller\\_id: huawei\\_inverter\n register\\_type: holding\n address: 32000\n bitmask: 0x010\n - name: \"Huawei inverter state normal stop\"\n icon: \"mdi:information\"\n platform: modbus\\_controller\n modbus\\_controller\\_id: huawei\\_inverter\n register\\_type: holding\n address: 32000\n bitmask: 0x020\n - name: \"Huawei inverter state stop due to faults\"\n icon: \"mdi:information\"\n platform: modbus\\_controller\n modbus\\_controller\\_id: huawei\\_inverter\n register\\_type: holding\n address: 32000\n bitmask: 0x040\n - name: \"Huawei inverter state stop due to power rationing\"\n icon: \"mdi:information\"\n platform: modbus\\_controller\n modbus\\_controller\\_id: huawei\\_inverter\n register\\_type: holding\n address: 32000\n bitmask: 0x080\n - name: \"Huawei inverter state shutdown\"\n icon: \"mdi:information\"\n platform: modbus\\_controller\n modbus\\_controller\\_id: huawei\\_inverter\n register\\_type: holding\n address: 32000\n bitmask: 0x100\n - name: \"Huawei inverter state spot check\"\n icon: \"mdi:information\"\n platform: modbus\\_controller\n modbus\\_controller\\_id: huawei\\_inverter\n register\\_type: holding\n address: 32000\n bitmask: 0x200\n # Register 32002\n - name: \"Huawei inverter state unlocked\"\n icon: \"mdi:information\"\n platform: modbus\\_controller\n modbus\\_controller\\_id: huawei\\_inverter\n register\\_type: holding\n address: 32002\n bitmask: 0x1\n - name: \"Huawei inverter state PV connected\"\n icon: \"mdi:information\"\n platform: modbus\\_controller\n modbus\\_controller\\_id: huawei\\_inverter\n register\\_type: holding\n address: 32002\n bitmask: 0x2\n - name: \"Huawei inverter state DSP data collection\"\n icon: \"mdi:information\"\n platform: modbus\\_controller\n modbus\\_controller\\_id: huawei\\_inverter\n register\\_type: holding\n address: 32002\n bitmask: 0x4\n # Register 32003\n - name: \"Huawei inverter state off-grid\"\n icon: \"mdi:information\"\n platform: modbus\\_controller\n modbus\\_controller\\_id: huawei\\_inverter\n register\\_type: holding\n address: 32003\n bitmask: 0x1\n - name: \"Huawei inverter state off-grid switch enable\"\n icon: \"mdi:information\"\n platform: modbus\\_controller\n modbus\\_controller\\_id: huawei\\_inverter\n register\\_type: holding\n address: 32003\n bitmask: 0x2\n # Register 32008\n - name: \"Huawei inverter alarm High String Input Voltage\"\n icon: \"mdi:information\"\n platform: modbus\\_controller\n modbus\\_controller\\_id: huawei\\_inverter\n register\\_type: holding\n address: 32008\n bitmask: 0x0001\n - name: \"Huawei inverter alarm DC Arc Fault\"\n icon: \"mdi:information\"\n platform: modbus\\_controller\n modbus\\_controller\\_id: huawei\\_inverter\n register\\_type: holding\n address: 32008\n bitmask: 0x0002\n - name: \"Huawei inverter alarm String Reverse Connection\"\n icon: \"mdi:information\"\n platform: modbus\\_controller\n modbus\\_controller\\_id: huawei\\_inverter\n register\\_type: holding\n address: 32008\n bitmask: 0x0004\n - name: \"Huawei inverter alarm String Current Backfeed\"\n icon: \"mdi:information\"\n platform: modbus\\_controller\n modbus\\_controller\\_id: huawei\\_inverter\n register\\_type: holding\n address: 32008\n bitmask: 0x0008\n - name: \"Huawei inverter alarm Abnormal String Power\"\n icon: \"mdi:information\"\n platform: modbus\\_controller\n modbus\\_controller\\_id: huawei\\_inverter\n register\\_type: holding\n address: 32008\n bitmask: 0x0010\n - name: \"Huawei inverter alarm AFCI Self-Check Fail\"\n icon: \"mdi:information\"\n platform: modbus\\_controller\n modbus\\_controller\\_id: huawei\\_inverter\n register\\_type: holding\n address: 32008\n bitmask: 0x0020\n - name: \"Huawei inverter alarm Phase Wire Short-Circuited to PE\"\n icon: \"mdi:information\"\n platform: modbus\\_controller\n modbus\\_controller\\_id: huawei\\_inverter\n register\\_type: holding\n address: 32008\n bitmask: 0x0040\n - name: \"Huawei inverter alarm Grid Loss\"\n icon: \"mdi:information\"\n platform: modbus\\_controller\n modbus\\_controller\\_id: huawei\\_inverter\n register\\_type: holding\n address: 32008\n bitmask: 0x0080\n - name: \"Huawei inverter alarm Grid Undervoltage\"\n icon: \"mdi:information\"\n platform: modbus\\_controller\n modbus\\_controller\\_id: huawei\\_inverter\n register\\_type: holding\n address: 32008\n bitmask: 0x0100\n - name: \"Huawei inverter alarm Grid Overvoltage\"\n icon: \"mdi:information\"\n platform: modbus\\_controller\n modbus\\_controller\\_id: huawei\\_inverter\n register\\_type: holding\n address: 32008\n bitmask: 0x0200\n - name: \"Huawei inverter alarm Grid Volt. Imbalance\"\n icon: \"mdi:information\"\n platform: modbus\\_controller\n modbus\\_controller\\_id: huawei\\_inverter\n register\\_type: holding\n address: 32008\n bitmask: 0x0400\n - name: \"Huawei inverter alarm Grid Overfrequency\"\n icon: \"mdi:information\"\n platform: modbus\\_controller\n modbus\\_controller\\_id: huawei\\_inverter\n register\\_type: holding\n address: 32008\n bitmask: 0x0800\n - name: \"Huawei inverter alarm Grid Underfrequency\"\n icon: \"mdi:information\"\n platform: modbus\\_controller\n modbus\\_controller\\_id: huawei\\_inverter\n register\\_type: holding\n address: 32008\n bitmask: 0x1000\n - name: \"Huawei inverter alarm Unstable Grid Frequency\"\n icon: \"mdi:information\"\n platform: modbus\\_controller\n modbus\\_controller\\_id: huawei\\_inverter\n register\\_type: holding\n address: 32008\n bitmask: 0x2000\n - name: \"Huawei inverter alarm Output Overcurrent\"\n icon: \"mdi:information\"\n platform: modbus\\_controller\n modbus\\_controller\\_id: huawei\\_inverter\n register\\_type: holding\n address: 32008\n bitmask: 0x4000\n - name: \"Huawei inverter alarm Output DC Component Overhigh\"\n icon: \"mdi:information\"\n platform: modbus\\_controller\n modbus\\_controller\\_id: huawei\\_inverter\n register\\_type: holding\n address: 32008\n bitmask: 0x8000", "subject": "code_to_code_translation", "answer": "```cpp\nvoid readRegisters() {\n    // Read text_sensor registers\n    uint16_t text_sensor_registers[30];\n    modbus_read_registers(huawei_inverter, 30000, 30, text_sensor_registers);\n    \n    // Parse text_sensor registers\n    char huawei_model[16];\n    memcpy(huawei_model, text_sensor_registers, 15);\n    \n    char huawei_sn[11];\n    memcpy(huawei_sn, text_sensor_registers + 15, 10);\n    \n    char huawei_pn[11];\n    memcpy(huawei_pn, text_sensor_registers + 25, 10);\n    \n    // Read binary_sensor registers\n    uint16_t binary_sensor_registers[10];\n    modbus_read_registers(huawei_inverter, 32000, 10, binary_sensor_registers);\n    \n    // Parse binary_sensor registers\n    bool standby = binary_sensor_registers[0] & 0x001;\n    bool grid_connected = binary_sensor_registers[0] & 0x002;\n    bool grid_connected_normally = binary_sensor_registers[0] & 0x004;\n    bool grid_derating_power_rationing = binary_sensor_registers[0] & 0x008;\n    bool grid_derating_internal_causes = binary_sensor_registers[0] & 0x010;\n    // Add more parsing for other binary sensors\n}\n```"}
{"question": "The following code uses plotly in R to plot contours of a function superimpose on a scatter plot of points. Rewrite it in Python:\nx1\\_range = range(Xtr[,1])\nx2\\_range = range(Xtr[,2])\nn\\_grid\\_points = 75\nx1\\_seq = seq(x1\\_range[1],x1\\_range[2], length.out = n\\_grid\\_points)\nx2\\_seq = seq(x2\\_range[1],x2\\_range[2], length.out = n\\_grid\\_points)\nXgrid = expand.grid(x1 = x1\\_seq, \n x2 = x2\\_seq) %>% as.matrix\n\n# Implement your own NW classifier: nw(...) does that\netah = nw(Xgrid, Xtr, y)\n\n# Using plot\\_ly\nlibrary(plotly)\nplot\\_ly(data.frame(etah = etah, radius\\_mean = Xgrid[,1], texture\\_mean = Xgrid[,2]),\n x = ~radius\\_mean, y = ~texture\\_mean, z = ~etah, type = \"contour\",\n opacity=1, colorbar=list(title=\"Reg func\")) %>% \n add\\_trace(x = Xtr[y==0,1], y = Xtr[y==0,2], type = \"scatter\", mode=\"markers\", \n marker = list(color='rgb(17, 157, 255)',\n line = list(\n color = 'rgb(0,0,0)',\n width = 1\n )), name=\"Class 0\") %>% \n add\\_trace(x = Xtr[y==1,1], y = Xtr[y==1,2], type = \"scatter\", mode=\"markers\", \n marker = list(color='rgb(250, 250, 100)',\n line = list(\n color = 'rgb(0,0,0)',\n width = 1\n )), name=\"Class 1\")", "subject": "code_to_code_translation", "answer": "```python\nimport plotly.express as px\nimport numpy as np\n\nx1_range = [np.min(Xtr[:,0]), np.max(Xtr[:,0])]\nx2_range = [np.min(Xtr[:,1]), np.max(Xtr[:,1])]\nn_grid_points = 75\nx1_seq = np.linspace(x1_range[0], x1_range[1], num=n_grid_points)\nx2_seq = np.linspace(x2_range[0], x2_range[1], num=n_grid_points)\n\nXgrid = np.array(np.meshgrid(x1_seq, x2_seq)).T.reshape(-1, 2)\n\netah = nw(Xgrid, Xtr, y)\n\nfig = px.scatter(data_frame=pd.DataFrame({'etah': etah, 'radius_mean': Xgrid[:,0], 'texture_mean': Xgrid[:,1]}),\n                 x='radius_mean', y='texture_mean', color='etah', facet_col='etah', facet_col_wrap=2)\n\nfig.add_scatter(x=Xtr[y==0,0], y=Xtr[y==0,1], mode='markers', name='Class 0', marker_color='rgb(17, 157, 255)', \n                marker_line_color='rgb(0, 0, 0)', marker_line_width=1)\n\nfig.add_scatter(x=Xtr[y==1,0], y=Xtr[y==1,1], mode='markers', name='Class 1', marker_color='rgb(250, 250, 100)', \n                marker_line_color='rgb(0, 0, 0)', marker_line_width=1)\n\nfig.show()\n```"}
{"question": "require 'aws-sdk-cloudwatch'\nrequire 'thwait'\n\n# Set the AWS region and credentials for the Cloudwatch client:\n#Aws.config[:region] = 'us-east-2'\n#Aws.config[:credentials] = Aws::Credentials.new('your-aws-access-key-id', 'your-aws-secret-access-key')\n\n# Create a Cloudwatch client:\ncloudwatch = Aws::CloudWatch::Client.new\n\n# Create a list of IP addresses to ping:\nip\\_addresses = ['8.8.8.8', '8.8.4.4', '10.0.10.10', '10.0.10.11', '10.0.10.20', '10.0.10.21', '10.0.10.22' '10.0.0.1']\n\nlight\\_mapping = {\n bulb: {\n 'office-bathroom' => 1..3,\n 'hallway-bathroom' => 1..3,\n 'kids-bedroom' => 1..3,\n 'living-room' => 1..2,\n 'dining-room' => 1..1,\n 'front-hallway' => 1..1,\n 'rear-hallway' => 1..1,\n },\n candle: {\n 'office' => 1..2,\n 'adult-bedroom' => 1..3,\n }\n}\n\nhostnames = light\\_mapping.flat\\_map do |light\\_type, rooms|\n rooms.flat\\_map do |room\\_name, light\\_range|\n light\\_range.map {|light\\_number| \"#{room\\_name}-#{light\\_type}-#{light\\_number}\" }\n end\nend\n# Ping each IP address and submit the ping time to Cloudwatch:\nall\\_threads = hostnames.map do |hostname|\n Thread.new do\n loop do\n output = `ping -c 1 #{hostname}`\n ip\\_address, ping\\_time = output.scan(/(\\d+\\.\\d+\\.\\d+\\.\\d+):.\\*time=(\\d+.\\d+) ms/).flatten\n ip\\_address\\_hostname = [ip\\_address, hostname].join \",\"\n cloudwatch.put\\_metric\\_data(\n namespace: '5116\\_Academy\\_Wifi',\n metric\\_data: [\n {\n metric\\_name: 'PingTime',\n dimensions: [\n {\n name: 'IPAddress\\_Hostname',\n value: ip\\_address\\_hostname\n }\n ],\n value: ping\\_time,\n unit: 'Seconds'\n }\n ]\n )\n rescue StandardError => e\n puts e.message\n ensure\n puts sprintf(\"%20s %30s %15s\", ip\\_address, hostname, ping\\_time)\n sleep 5 + rand(10)\n end\n end\nend\n\nThreadsWait.all\\_waits(\\*all\\_threads) do |t|\n STDERR.puts \"Thread #{t} has terminated.\"\nend\n\nTranslate the above into python", "subject": "code_to_code_translation", "answer": "import boto3\nimport threading\nimport subprocess\nimport time\nimport random\n\n# Create a Cloudwatch client\ncloudwatch = boto3.client('cloudwatch')\n\n# Create a list of IP addresses to ping\nip_addresses = ['8.8.8.8', '8.8.4.4', '10.0.10.10', '10.0.10.11', '10.0.10.20', '10.0.10.21', '10.0.10.22', '10.0.0.1']\n\nlight_mapping = {\n    'bulb': {\n        'office-bathroom': range(1, 4),\n        'hallway-bathroom': range(1, 4),\n        'kids-bedroom': range(1, 4),\n        'living-room': range(1, 3),\n        'dining-room': range(1, 2),\n        'front-hallway': range(1, 2),\n        'rear-hallway': range(1, 2)\n    },\n    'candle': {\n        'office': range(1, 3),\n        'adult-bedroom': range(1, 4)\n    }\n}\n\nhostnames = [f\"{room_name}-{light_type}-{light_number}\" for light_type, rooms in light_mapping.items() for room_name, light_range in rooms.items() for light_number in light_range]\n\n# Ping each IP address and submit the ping time to Cloudwatch\ndef ping_and_submit(hostname):\n    while True:\n        output = subprocess.getoutput(f\"ping -c 1 {hostname}\")\n        ip_address, ping_time = re.findall(r\"(\\d+\\.\\d+\\.\\d+\\.\\d+):.*time=(\\d+\\.\\d+) ms\", output)[0]\n        ip_address_hostname = f\"{ip_address},{hostname}\"\n        \n        cloudwatch.put_metric_data(\n            Namespace='5116_Academy_Wifi',\n            MetricData=[\n                {\n                    'MetricName': 'PingTime',\n                    'Dimensions': [\n                        {\n                            'Name': 'IPAddress_Hostname',\n                            'Value': ip_address_hostname\n                        }\n                    ],\n                    'Value': float(ping_time),\n                    'Unit': 'Seconds'\n                }\n            ]\n        )\n        \n        print(f\"{ip_address:20} {hostname:30} {ping_time:15}\")\n        time.sleep(5 + random.randint(0, 10))\n\nthreads = [threading.Thread(target=ping_and_submit, args=(hostname,)) for hostname in hostnames]\n\nfor thread in threads:\n    thread.start()\n\nfor thread in threads:\n    thread.join()"}
{"question": "Postgresql:\n CREATE TABLE \"objects\" IF NOT EXISTS(\n \"id\" int PRIMARY KEY,\n \"date\\_created\" datetime DEFAULT (now()),\n \"date\\_modified\" datetime DEFAULT (now()),\n \"filetype\" varchar(255),\n \"name\" varchar(255),\n \"description\" text\n );\n\n CREATE TABLE \"workflowmodules\" IF NOT EXISTS(\n \"id\" int PRIMARY KEY,\n \"name\" varchar(255),\n \"arg\\_types\" json,\n \"return\\_types\" json,\n \"docstring\" text,\n \"pickle\\_id\" int\n );\n\n ALTER TABLE \"workflowmodules\" ADD FOREIGN KEY (\"pickle\\_id\") REFERENCES \"objects\" (\"id\");\n\nWrite the corresponding SQLAlchemy code in python", "subject": "code_to_code_translation", "answer": "from sqlalchemy import create_engine, Column, Integer, String, Text, DateTime, JSON\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import relationship\n\nBase = declarative_base()\n\nclass Object(Base):\n    __tablename__ = 'objects'\n\n    id = Column(Integer, primary_key=True)\n    date_created = Column(DateTime, default=datetime.datetime.now)\n    date_modified = Column(DateTime, default=datetime.datetime.now)\n    filetype = Column(String(255))\n    name = Column(String(255))\n    description = Column(Text)\n\nclass WorkflowModule(Base):\n    __tablename__ = 'workflowmodules'\n\n    id = Column(Integer, primary_key=True)\n    name = Column(String(255))\n    arg_types = Column(JSON)\n    return_types = Column(JSON)\n    docstring = Column(Text)\n    pickle_id = Column(Integer)\n\n    object = relationship(\"Object\")\n\nengine = create_engine('postgresql://username:password@localhost:5432/database_name')\nBase.metadata.create_all(engine)"}
{"question": "Refactor this java code into javascript with functional Maybe monad\npublic void thisIsFoo(@NonNull User user, @NonNull String id) {\n // do something with id\n}\n\npublic void thisIsFoo(@NonNull User user) {\n // do something without id\n}\n\n// ở caller:\nString id = doSomethingToGetId(); // id can be null\nif (id != null) {\n thisIsFoo(user, id);\n} else {\n thisIsFoo(user);\n}", "subject": "code_to_code_translation", "answer": "```javascript\nconst thisIsFoo = (user, idOrNothing) => {\n  idOrNothing.matchWith({\n    Just: id => {\n      // do something with id\n    },\n    Nothing: () => {\n      // do something without id\n    }\n  })\n}\n\nconst id = getById(); // Maybe<Id>\nid.matchWith({\n  Just: id => thisIsFoo(user, id),\n  Nothing: () => thisIsFoo(user)\n})\n```"}
{"question": "Can you translate the following Python code to C++?\n\nPRIME = 2 \\*\\* 31 - 1\ndef copyright\\_match(T, S):\n \"\"\"\n Input: T | an ASCII string \n Input: S | an ASCII string where |S| < |T|\n \n Return `True` if S appears inside the transcript T and `False` otherwise.\n \"\"\"\n\n def R(S):\n r = 0\n for c in S:\n r = (128 \\* r + ord(c)) % PRIME\n return r\n\n r\\_s = R(S)\n r\\_t = R(T[:len(S)])\n\n print(r\\_s, r\\_t)\n\n if r\\_s == r\\_t and S == T[:len(S)]:\n return True\n\n f = pow(128, len(S), PRIME)\n for i in range(len(S), len(T)):\n r\\_t = (128 \\* r\\_t - f \\* ord(T[i - len(S)]) + ord(T[i])) % PRIME\n if r\\_s == r\\_t and S == T[i - len(S) + 1:i + 1]:\n return True\n\n return False", "subject": "code_to_code_translation", "answer": "```cpp\n#define PRIME (1LL << 31) - 1\n\nbool copyright_match(string T, string S) {\n    auto R = [&](string s) {\n        int r = 0;\n        for (char c : s) {\n            r = (r * 128 + c) % PRIME;\n        }\n        return r;\n    };\n\n    int r_s = R(S);\n    int r_t = R(T.substr(0, S.size()));\n\n    if (r_s == r_t && T.substr(0, S.size()) == S) {\n        return true;\n    }\n\n    int f = pow(128, S.size(), PRIME);\n    for (int i = S.size(); i < T.size(); ++i) {\n        r_t = (r_t * 128 - f * T[i - S.size()] + T[i]) % PRIME;\n        if (r_s == r_t && T.substr(i - S.size() + 1, S.size()) == S) {\n            return true;\n        }\n    }\n    return false;\n}```"}
{"question": "Can you change this code tf to torch?\n```py\n# Define LSTM model\nmodel = Sequential()\nmodel.add(Embedding(2000, 100, input\\_length=X.shape[1], weights=[embedding\\_matrix], trainable=False))\nmodel.add(SpatialDropout1D(0.4))\nmodel.add(LSTM(196, dropout=0.2, recurrent\\_dropout=0.2))\nmodel.add(Dense(8, activation='softmax'))\n\n# Compile the model\nmodel.compile(loss='categorical\\_crossentropy', optimizer='adam', metrics=['accuracy'])\n\n# Set early stopping to prevent overfitting\nearly\\_stopping = EarlyStopping(monitor='val\\_loss', patience=5, verbose=1, mode='auto')\n\n# Train the model\n# model.fit(X\\_train, Y\\_train, validation\\_data=(X\\_val, Y\\_val), epochs=10, batch\\_size=32, callbacks=[early\\_stopping])\nwith tf.device('/GPU:0'): # Specify the GPU you want to use\n model.fit(X\\_train, Y\\_train, validation\\_data=(X\\_val, Y\\_val), epochs=10, batch\\_size=32, callbacks=[early\\_stopping])\n```", "subject": "code_to_code_translation", "answer": "Yes, here's the modified code with **tf** replaced by **torch**:\n```python\n# Define LSTM model\nmodel = torch.nn.Sequential(\n    torch.nn.Embedding(2000, 100, input_length=X.shape[1], weights=[embedding_matrix], trainable=False),\n    torch.nn.Dropout(0.4),\n    torch.nn.LSTM(196, dropout=0.2, recurrent_dropout=0.2),\n    torch.nn.Dense(8, activation='softmax')\n)\n\n# Define loss function and optimizer\ncriterion = torch.nn.CrossEntropyLoss()\noptimizer = torch.optim.Adam(model.parameters())\n\n# Set early stopping to prevent overfitting\nearly_stopping = torch.cuda.EarlyStopping(monitor='val_loss', patience=5, verbose=1, mode='auto')\n\n# Train the model\nmodel.fit(X_train, Y_train, validation_data=(X_val, Y_val), epochs=10, batch_size=32, callbacks=[early_stopping])\n```\nIn the updated code, we replaced the Keras Sequential model with the PyTorch Sequential module, and also replaced the Keras layers with their PyTorch counterparts. Additionally, we replaced the TensorFlow-specific **tf.device** with PyTorch's **torch.cuda.device** to specify the GPU."}
{"question": "I want you to be a cpp to kotlin code converter that does the following :\n1) Use the following rules for converting C++ structs to kotlin classes :\n a) there can be any number of cpp structs and these structs can have nested structs which in turn can have more nested structs. The whole hierarchy needs to be converted for all the structs. \nb) lines starting with macros REFLECT\\_TYPE or REFLECT\\_EMPTY\\_TYPE in cpp are ignored for conversion.\nc) The following types should be converted as follows:\ni)`std::vector` -> `List`\nd) any container type other than std::vector in cpp can not be converted\n\nThe Cpp code be as follows: \n\nstruct registration\\_details {\n REFLECT\\_TYPE(registration\\_details, registration\\_num, is\\_registration\\_expired, registration\\_id, registration\\_epoch);\n int registration\\_num;\n bool is\\_registration\\_expired;\n std::string registration\\_id;\n double registration\\_epoch;\n};\n\nstruct locality\\_address {\n REFLECT\\_TYPE(locality\\_address, locality\\_longitude, locality\\_lattitude, locality\\_keyword);\n double locality\\_longitude;\n float locality\\_lattitude;\n std::string locality\\_keyword;\n};\n\nstruct locality {\n REFLECT\\_TYPE(locality, locality\\_name, locality\\_per\\_capita\\_income, is\\_registered, num\\_houses, num\\_people, reg\\_details, local\\_address);\n std::string locality\\_name;\n double locality\\_per\\_capita\\_income;\n bool is\\_registered;\n int num\\_houses;\n float num\\_people;\n registration\\_details reg\\_details;\n locality\\_address local\\_address;\n};\n\nstruct address {\n REFLECT\\_TYPE(address, hno, local, is\\_rented, num\\_people, family\\_income)\n int hno;\n locality local;\n bool is\\_rented;\n float num\\_people;\n double family\\_income;\n};\n\n What will the kotlin code be?", "subject": "code_to_code_translation", "answer": "class registration_details(\n    var registration_num: Int,\n    var is_registration_expired: Boolean,\n    var registration_id: String,\n    var registration_epoch: Double\n)\n\nclass locality_address(\n    var locality_longitude: Double,\n    var locality_lattitude: Float,\n    var locality_keyword: String\n)\n\nclass locality(\n    var locality_name: String,\n    var locality_per_capita_income: Double,\n    var is_registered: Boolean,\n    var num_houses: Int,\n    var num_people: Float,\n    var reg_details: registration_details,\n    var local_address: locality_address\n)\n\nclass address(\n    var hno: Int,\n    var local: locality,\n    var is_rented: Boolean,\n    var num_people: Float,\n    var family_income: Double\n)"}
{"question": "Rewrite python code to c++\n\nH, W = map(int, input().split())\nN = int(input())\na = list(map(int, input().split()))\n\na\\_ind = 0\nused = 0\nres = [[0]\\*W for i in range(H)]\nfor i in range(H):\n for j in range(W):\n col = j if i % 2 == 0 else W - 1 - j\n res[i][col] = a[a\\_ind]\n used += 1\n \n if used == a[a\\_ind]:\n a\\_ind += 1\n used = 0\n\n for i in range(H):\n print(\\*res[i])", "subject": "code_to_code_translation", "answer": "```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nint main() {\n    int h, w;\n    cin >> h >> w;\n    int n;\n    cin >> n;\n    int a[n];\n    for (int i = 0; i < n; i++)\n        cin >> a[i];\n    int row = 0, col = 0;\n    int idx = 0;\n    int mat[h][w];\n    for (int i = 0; i < h; i++) {\n        for (int j = 0; j < w; j++) {\n            if (i % 2 == 0)\n                mat[i][j] = a[idx++];\n            else\n                mat[i][w - 1 - j] = a[idx++];\n        }\n    }\n    for (int i = 0; i < h; i++) {\n        for (int j = 0; j < w; j++) {\n            cout << mat[i][j] << \" \";\n        }\n        cout << endl;\n    }\n    return 0;\n}```"}
{"question": "convert to react.js hooks\n\nimport React, { useState, useEffect } from \"react\";\nimport \"./index.css\";\nimport { Skeleton } from \"antd\";\n\nconst App: React.FC = () => {\n const [loading, setLoading] = useState(true);\n\n useEffect(() => {\n setTimeout(() => {\n setLoading(false);\n }, 1000);\n }, []);\n return <>{loading ?  : <>};\n};\n\nexport default App;", "subject": "code_to_code_translation", "answer": "import React, { useState, useEffect } from \"react\";\nimport \"./index.css\";\nimport { Skeleton } from \"antd\";\n\nconst App = () => {\n const [loading, setLoading] = useState(true);\n\n useEffect(() => {\n   setTimeout(() => {\n     setLoading(false);\n   }, 1000);\n }, []);\n\n return <>{loading ? <Skeleton active /> : <>}</>;\n};\n\nexport default App;"}
{"question": "Translate this Python code into Ruby ASAP!\n\ndef greet(name):\n    return \"Hello, \" + name + \"!\"", "subject": "code_to_code_translation", "answer": "```ruby\ndef greet(name)\n  \"Hello, #{name}!\"\nend\n```"}
